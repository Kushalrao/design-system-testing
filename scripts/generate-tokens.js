#!/usr/bin/env node

/**
 * Token Generation Script
 * Converts tokens.json from Figma to TypeScript files
 */

const fs = require('fs');
const path = require('path');

const TOKENS_FILE = path.join(__dirname, '..', 'tokens.json');
const OUTPUT_DIR = path.join(__dirname, '..', 'src', 'tokens');

function generateColors(tokens) {
  const colors = {
    primitive: {},
    semantic: {},
  };

  // Process color tokens
  Object.entries(tokens.collections).forEach(([collectionName, collection]) => {
    collection.tokens.forEach(token => {
      if (token.type === 'color') {
        if (collectionName.toLowerCase().includes('primitive')) {
          colors.primitive[token.name] = token.value;
        } else {
          colors.semantic[token.name] = token.value;
        }
      }
    });
  });

  return `/**
 * Color Design Tokens
 * Auto-generated from Figma Variables
 * DO NOT EDIT MANUALLY - This file is generated by scripts/generate-tokens.js
 */

export const colors = ${JSON.stringify(colors, null, 2)} as const;

export type ColorMode = 'light' | 'dark';
export type ColorToken = keyof typeof colors.semantic;
`;
}

function generateSpacing(tokens) {
  const spacing = {
    base: 4,
  };

  // Process spacing tokens
  Object.entries(tokens.collections).forEach(([collectionName, collection]) => {
    collection.tokens.forEach(token => {
      if (token.type === 'spacing') {
        spacing[token.name] = token.value;
      }
    });
  });

  return `/**
 * Spacing Design Tokens
 * Auto-generated from Figma Variables
 * DO NOT EDIT MANUALLY - This file is generated by scripts/generate-tokens.js
 */

export const spacing = ${JSON.stringify(spacing, null, 2)} as const;

export type SpacingToken = keyof typeof spacing;
`;
}

function generateTypography(tokens) {
  const typography = {
    fontFamily: {
      primary: 'System',
      mono: 'Courier New',
    },
    fontSize: {},
    fontWeight: {
      normal: '400',
      medium: '500',
      semibold: '600',
      bold: '700',
    },
  };

  // Process typography tokens
  Object.entries(tokens.collections).forEach(([collectionName, collection]) => {
    collection.tokens.forEach(token => {
      if (token.type === 'typography') {
        if (token.name.includes('font-size')) {
          typography.fontSize[token.name.replace('font-size-', '')] = token.value;
        }
      }
    });
  });

  return `/**
 * Typography Design Tokens
 * Auto-generated from Figma Variables
 * DO NOT EDIT MANUALLY - This file is generated by scripts/generate-tokens.js
 */

export const typography = ${JSON.stringify(typography, null, 2)} as const;

export type TypographyToken = keyof typeof typography;
`;
}

function generateRadius(tokens) {
  const radius = {
    none: 0,
    sm: 4,
    md: 8,
    lg: 12,
    xl: 16,
    '2xl': 24,
    full: 9999,
  };

  return `/**
 * Border Radius Design Tokens
 * Auto-generated from Figma Variables
 * DO NOT EDIT MANUALLY - This file is generated by scripts/generate-tokens.js
 */

export const radius = ${JSON.stringify(radius, null, 2)} as const;

export type RadiusToken = keyof typeof radius;
`;
}

function generateShadows() {
  const shadows = {
    ios: {
      sm: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.18,
        shadowRadius: 1.0,
        elevation: 1,
      },
      md: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.23,
        shadowRadius: 2.62,
        elevation: 4,
      },
      lg: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.30,
        shadowRadius: 4.65,
        elevation: 8,
      },
    },
  };

  return `/**
 * Shadow Design Tokens
 * Auto-generated from Figma Variables
 * DO NOT EDIT MANUALLY - This file is generated by scripts/generate-tokens.js
 */

export const shadows = ${JSON.stringify(shadows, null, 2)} as const;

export type ShadowToken = keyof typeof shadows;
`;
}

function generateIndex() {
  return `/**
 * Design Tokens Index
 * Central export for all design tokens
 */

export * from './colors';
export * from './spacing';
export * from './typography';
export * from './radius';
export * from './shadows';

// Re-export commonly used types
export type { ColorMode, ColorToken } from './colors';
export type { SpacingToken } from './spacing';
export type { TypographyToken } from './typography';
export type { RadiusToken } from './radius';
export type { ShadowToken } from './shadows';
`;
}

function main() {
  console.log('🎨 Generating design tokens...');

  // Check if tokens.json exists
  if (!fs.existsSync(TOKENS_FILE)) {
    console.log('⚠️  tokens.json not found. Using default tokens.');
    return;
  }

  // Read tokens.json
  const tokensData = JSON.parse(fs.readFileSync(TOKENS_FILE, 'utf8'));

  // Ensure output directory exists
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  }

  // Generate TypeScript files
  const files = [
    { name: 'colors.ts', content: generateColors(tokensData) },
    { name: 'spacing.ts', content: generateSpacing(tokensData) },
    { name: 'typography.ts', content: generateTypography(tokensData) },
    { name: 'radius.ts', content: generateRadius(tokensData) },
    { name: 'shadows.ts', content: generateShadows() },
    { name: 'index.ts', content: generateIndex() },
  ];

  files.forEach(({ name, content }) => {
    const filePath = path.join(OUTPUT_DIR, name);
    fs.writeFileSync(filePath, content);
    console.log(`✅ Generated ${name}`);
  });

  console.log('🎉 Design tokens generated successfully!');
}

if (require.main === module) {
  main();
}

module.exports = { main };
